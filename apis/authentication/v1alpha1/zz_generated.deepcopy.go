//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2021 SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JWKSSpec) DeepCopyInto(out *JWKSSpec) {
	*out = *in
	if in.Keys != nil {
		in, out := &in.Keys, &out.Keys
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	if in.DistributedClaims != nil {
		in, out := &in.DistributedClaims, &out.DistributedClaims
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JWKSSpec.
func (in *JWKSSpec) DeepCopy() *JWKSSpec {
	if in == nil {
		return nil
	}
	out := new(JWKSSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OIDCAuthenticationSpec) DeepCopyInto(out *OIDCAuthenticationSpec) {
	*out = *in
	if in.UsernameClaim != nil {
		in, out := &in.UsernameClaim, &out.UsernameClaim
		*out = new(string)
		**out = **in
	}
	if in.UsernamePrefix != nil {
		in, out := &in.UsernamePrefix, &out.UsernamePrefix
		*out = new(string)
		**out = **in
	}
	if in.GroupsClaim != nil {
		in, out := &in.GroupsClaim, &out.GroupsClaim
		*out = new(string)
		**out = **in
	}
	if in.GroupsPrefix != nil {
		in, out := &in.GroupsPrefix, &out.GroupsPrefix
		*out = new(string)
		**out = **in
	}
	if in.SupportedSigningAlgs != nil {
		in, out := &in.SupportedSigningAlgs, &out.SupportedSigningAlgs
		*out = make([]SigningAlgorithm, len(*in))
		copy(*out, *in)
	}
	if in.RequiredClaims != nil {
		in, out := &in.RequiredClaims, &out.RequiredClaims
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.ExtraClaims != nil {
		in, out := &in.ExtraClaims, &out.ExtraClaims
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.CABundle != nil {
		in, out := &in.CABundle, &out.CABundle
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	in.JWKS.DeepCopyInto(&out.JWKS)
	if in.MaxTokenExpirationSeconds != nil {
		in, out := &in.MaxTokenExpirationSeconds, &out.MaxTokenExpirationSeconds
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OIDCAuthenticationSpec.
func (in *OIDCAuthenticationSpec) DeepCopy() *OIDCAuthenticationSpec {
	if in == nil {
		return nil
	}
	out := new(OIDCAuthenticationSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OIDCAuthenticationStatus) DeepCopyInto(out *OIDCAuthenticationStatus) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OIDCAuthenticationStatus.
func (in *OIDCAuthenticationStatus) DeepCopy() *OIDCAuthenticationStatus {
	if in == nil {
		return nil
	}
	out := new(OIDCAuthenticationStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpenIDConnect) DeepCopyInto(out *OpenIDConnect) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	out.Status = in.Status
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpenIDConnect.
func (in *OpenIDConnect) DeepCopy() *OpenIDConnect {
	if in == nil {
		return nil
	}
	out := new(OpenIDConnect)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OpenIDConnect) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpenIDConnectList) DeepCopyInto(out *OpenIDConnectList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]OpenIDConnect, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpenIDConnectList.
func (in *OpenIDConnectList) DeepCopy() *OpenIDConnectList {
	if in == nil {
		return nil
	}
	out := new(OpenIDConnectList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OpenIDConnectList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}
